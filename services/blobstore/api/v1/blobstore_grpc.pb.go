// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: services/blobstore/api/v1/blobstore.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlobStore_GetBlob_FullMethodName    = "/blobstore.BlobStore/GetBlob"
	BlobStore_CreateBlob_FullMethodName = "/blobstore.BlobStore/CreateBlob"
)

// BlobStoreClient is the client API for BlobStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlobStoreClient interface {
	GetBlob(ctx context.Context, in *GetBlobRequest, opts ...grpc.CallOption) (BlobStore_GetBlobClient, error)
	CreateBlob(ctx context.Context, opts ...grpc.CallOption) (BlobStore_CreateBlobClient, error)
}

type blobStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewBlobStoreClient(cc grpc.ClientConnInterface) BlobStoreClient {
	return &blobStoreClient{cc}
}

func (c *blobStoreClient) GetBlob(ctx context.Context, in *GetBlobRequest, opts ...grpc.CallOption) (BlobStore_GetBlobClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlobStore_ServiceDesc.Streams[0], BlobStore_GetBlob_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &blobStoreGetBlobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlobStore_GetBlobClient interface {
	Recv() (*GetBlobReply, error)
	grpc.ClientStream
}

type blobStoreGetBlobClient struct {
	grpc.ClientStream
}

func (x *blobStoreGetBlobClient) Recv() (*GetBlobReply, error) {
	m := new(GetBlobReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blobStoreClient) CreateBlob(ctx context.Context, opts ...grpc.CallOption) (BlobStore_CreateBlobClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlobStore_ServiceDesc.Streams[1], BlobStore_CreateBlob_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &blobStoreCreateBlobClient{stream}
	return x, nil
}

type BlobStore_CreateBlobClient interface {
	Send(*CreateBlobRequest) error
	CloseAndRecv() (*CreateBlobReply, error)
	grpc.ClientStream
}

type blobStoreCreateBlobClient struct {
	grpc.ClientStream
}

func (x *blobStoreCreateBlobClient) Send(m *CreateBlobRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blobStoreCreateBlobClient) CloseAndRecv() (*CreateBlobReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateBlobReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlobStoreServer is the server API for BlobStore service.
// All implementations must embed UnimplementedBlobStoreServer
// for forward compatibility
type BlobStoreServer interface {
	GetBlob(*GetBlobRequest, BlobStore_GetBlobServer) error
	CreateBlob(BlobStore_CreateBlobServer) error
	mustEmbedUnimplementedBlobStoreServer()
}

// UnimplementedBlobStoreServer must be embedded to have forward compatible implementations.
type UnimplementedBlobStoreServer struct {
}

func (UnimplementedBlobStoreServer) GetBlob(*GetBlobRequest, BlobStore_GetBlobServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlob not implemented")
}
func (UnimplementedBlobStoreServer) CreateBlob(BlobStore_CreateBlobServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateBlob not implemented")
}
func (UnimplementedBlobStoreServer) mustEmbedUnimplementedBlobStoreServer() {}

// UnsafeBlobStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlobStoreServer will
// result in compilation errors.
type UnsafeBlobStoreServer interface {
	mustEmbedUnimplementedBlobStoreServer()
}

func RegisterBlobStoreServer(s grpc.ServiceRegistrar, srv BlobStoreServer) {
	s.RegisterService(&BlobStore_ServiceDesc, srv)
}

func _BlobStore_GetBlob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlobStoreServer).GetBlob(m, &blobStoreGetBlobServer{stream})
}

type BlobStore_GetBlobServer interface {
	Send(*GetBlobReply) error
	grpc.ServerStream
}

type blobStoreGetBlobServer struct {
	grpc.ServerStream
}

func (x *blobStoreGetBlobServer) Send(m *GetBlobReply) error {
	return x.ServerStream.SendMsg(m)
}

func _BlobStore_CreateBlob_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlobStoreServer).CreateBlob(&blobStoreCreateBlobServer{stream})
}

type BlobStore_CreateBlobServer interface {
	SendAndClose(*CreateBlobReply) error
	Recv() (*CreateBlobRequest, error)
	grpc.ServerStream
}

type blobStoreCreateBlobServer struct {
	grpc.ServerStream
}

func (x *blobStoreCreateBlobServer) SendAndClose(m *CreateBlobReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blobStoreCreateBlobServer) Recv() (*CreateBlobRequest, error) {
	m := new(CreateBlobRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlobStore_ServiceDesc is the grpc.ServiceDesc for BlobStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlobStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blobstore.BlobStore",
	HandlerType: (*BlobStoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlob",
			Handler:       _BlobStore_GetBlob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateBlob",
			Handler:       _BlobStore_CreateBlob_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services/blobstore/api/v1/blobstore.proto",
}
